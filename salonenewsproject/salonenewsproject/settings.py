"""
Django settings for salonebizness project.

Generated by 'django-admin startproject' using Django 1.9.1.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
import posixpath
from django.conf.global_settings import STATIC_ROOT

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

#add path to templates for this project using the base directory
TEMPLATE_DIR  = os.path.join(BASE_DIR, 'templates')

#add path to static directory 
STATIC_DIR = os.path.join(BASE_DIR, 'static')



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '94c93d9d-c073-4fa0-b918-f6db63da17ae'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    # Add your apps here to enable them
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'news',
    'registration', #for user registration and authentication.
    'bootstrap_toolkit', #to use bootstrap html, css and js
    #add app for humanisation
    'django.contrib.humanize' ,
    #'django_cron',#app that does cron jobs
    'django_cron'
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'salonenewsproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        #register directory for templates in this project 
        'DIRS': [TEMPLATE_DIR,],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'salonenewsproject.wsgi.application'

#static directories 
STATICFILES_DIRS = [STATIC_DIR, ]

#add module to do cron jobs
CRON_CLASSES = [
    "news.cron.UpdateArticles", 
    "news.cron.DeleteOldArticles",
    # ...
]

# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',

    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        #set minimum length of password to 6 chars long
        'OPTIONS': {'min_length': 6,},
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'

#STATIC_ROOT = posixpath.join(*(BASE_DIR.split(os.path.sep) + ['static']))

#login URL to redirect users to login
LOGIN_URL = '/news/login/'

#control the duration of sessions
#session is over when browser is closed
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

#setup to use the django registration redux app
#set the registration to open so that users can use it
REGISTRATION_OPEN = True
#set the number of days that the activation window will be open. 
#If user does not activatie within this period, he loses his registration
ACCOUNT_ACTIVATION_DAYS = 7
#set the automatic login function
REGISTRATION_AUTO_LOGIN = True
#set the success page that users will arrive to when logged in
LOGIN_REDIRECT_URL = '/news/'
#set the pages users are directed to if they're not logged in,
#and are trying to access pages that require login
LOGIN_URL = '/accounts/login/'
#set the url patterns for the registration app in urls.py project
# **END OF SETUP FOR REGISTRATION APP**

#add module to do cron jobs
#CRONJOBS = [
#    #check all feeds in the db and extract their articles every 5 mins
#    ('*/1 * * * *', 'news.cron.add_articles')
#]

















